# yaml-language-server: $schema=https://json.schemastore.org/github-workflow
name: Build and Release
permissions:
  contents: write
on:
  push:
    tags:
      - "v*"
jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: |
            platform-tools
            build-tools;34.0.0
            platforms;android-34
      - name: Prepare Android signing keystore
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          if [ -z "${ANDROID_KEYSTORE_BASE64}" ]; then
            echo "ANDROID_KEYSTORE_BASE64 is empty; aborting."
            exit 1
          fi
          KEYPATH="${RUNNER_TEMP}/stopnet.jks"
          echo "${ANDROID_KEYSTORE_BASE64}" | base64 -d > "${KEYPATH}"
          echo "ANDROID_KEYSTORE_PATH=${KEYPATH}" >> $GITHUB_ENV

      - name: Build release
        env:
          ANDROID_KEYSTORE_PATH: ${{ env.ANDROID_KEYSTORE_PATH }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          ./gradlew assembleRelease
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: app/build/outputs/apk/release/*.apk

      - name: Create GitHub Release and upload APK
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const tag = context.ref.replace(/^refs\/tags\//, '');
            const releaseName = `StopNet ${tag}`;

            // 创建或获取当前 tag 的 Release
            let release;
            try {
              const { data } = await github.rest.repos.getReleaseByTag({ owner, repo, tag });
              release = data;
            } catch {
              const { data } = await github.rest.repos.createRelease({
                owner,
                repo,
                tag_name: tag,
                name: releaseName,
                body: releaseName,
                make_latest: "false",
              });
              release = data;
            }

            // 上传构建出的 APK 文件
            const dir = 'app/build/outputs/apk/release';
            const files = fs.existsSync(dir) ? fs.readdirSync(dir).filter(f => f.toLowerCase().endsWith('.apk')) : [];
            if (files.length === 0) {
              core.setFailed(`在 ${dir} 未找到 APK 文件`);
            }

            for (const file of files) {
              const filePath = path.join(dir, file);
              const stat = fs.statSync(filePath);

              // 若当前 Release 中已有同名资产，则删除
              const existing = release.assets?.find(a => a.name === file);
              if (existing) {
                await github.rest.repos.deleteReleaseAsset({ owner, repo, asset_id: existing.id });
              }

              await github.request('POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}', {
                owner,
                repo,
                release_id: release.id,
                name: file,
                headers: {
                  'content-type': 'application/vnd.android.package-archive',
                  'content-length': stat.size,
                },
                data: fs.readFileSync(filePath),
              });
            }

            // 维护一个自动更新的 Latest Release，并上传统一命名的最新 APK
            let latestRelease;
            try {
              latestRelease = (await github.rest.repos.getReleaseByTag({ owner, repo, tag: 'latest' })).data;
            } catch {
              latestRelease = (await github.rest.repos.createRelease({
                owner,
                repo,
                tag_name: 'latest',
                name: 'Latest Release (Auto-maintained)',
                body: '',
                make_latest: "true",
              })).data;
            }

            const latestName = 'app-release-latest.apk';
            const existingLatest = latestRelease.assets?.find(a => a.name === latestName);
            if (existingLatest) {
              await github.rest.repos.deleteReleaseAsset({ owner, repo, asset_id: existingLatest.id });
            }

            const firstApkPath = path.join(dir, files[0]);
            const statLatest = fs.statSync(firstApkPath);
            await github.request('POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}', {
              owner,
              repo,
              release_id: latestRelease.id,
              name: latestName,
              headers: {
                'content-type': 'application/vnd.android.package-archive',
                'content-length': statLatest.size,
              },
              data: fs.readFileSync(firstApkPath),
            });

            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id: latestRelease.id,
              body: `当前最新版本: ${tag}\n更新时间: ${new Date().toISOString()}`,
              make_latest: "true",
            });
